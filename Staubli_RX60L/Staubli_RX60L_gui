#!/usr/bin/python
#    Copyright 2009 Alex Joni
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# graphic model of a Manutec R15



# link description
# link1 - stationary base
# link2 .. link7 - the 6 moving parts of the robot, numbered form base to end effector

#for loading modules from "modulepath"
#import sys
#sys.path.append(modulepath)

configpath = './obj/'
#configpath = ''

#Notes
### rotate [obj],theta,x,y,z
#link4 = Rotate([link4],-90,1,0,0)
### translate [obj], distance x distance y, distance z
#compensate for the origin of link2 not being in the rotation center
#link2 = Translate([link2],0,0,-665)
### apply HAL DOF [obj],halcomp,"pin", theta , rotate x, rotate y, rotate z
#link2 = HalRotate([link2],c,"joint1",1,0,0,1)


from vismach import *
import hal

c = hal.component("Staubli_RX60L_gui")
c.newpin("joint1", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint2", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint3", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint4", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint5", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint6", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("grip", hal.HAL_FLOAT, hal.HAL_IN)
c.ready()



# add a XYZ cross for debug
#floor = Collection([
#   Box(-100,-100,-0.1,100,100,0),
#   Box(-10,-0.1,-10,10,0,10),
#   Box(-0.1,-10,-10,0,10,10),
#   Color([0,1,0,1],[Box(-10,-10,9.9,10,10,10)]),
#   Color([1,0,0,1],[Box(19.9,-10,-10,20,10,10)])])

# units are inches - why the fuck would someone still use a measuring unit based on body parts !?!

#Color in rgba

#floor = Collection([Box(-5000,-5000,-3,500,500,0)])
#floor = Collection([Box(-2500,-2500,-3,2500,1500,0)])
floor = Collection([Box(-1500,-1500,-3,1500,1500,0)])
floor = Color([0,1,0,0],[floor])

work = Capture()

#tool goes here.. maybe later
tool = Capture()

# "tooltip" for backplot will be the tip of the tool, for now link7
tooltip = Capture()

tool = Collection([tooltip, tool])
#tool length compensation
tool = Translate([tool], 0, 0, -249.5)# #offset of axis 5 (99,5) + tool length (150)
#tool = Translate([tool], 0, 0, -99.5)


# link 7
link7 = AsciiOBJ(filename=configpath+"tool.obj");
#link7 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_tool.stl")
#link7 = Color([0,0,1,1],[link7])
link7 = Color([0.5,0.5,0.5,1],[link7])
##move link7 to 0 pos. so, that tooltip matches

#link7 = Translate([link7],0,0,-0.4)
link7 = Translate([link7],-730,-12,-1165)
link7 = Collection([link7, tool])
#link7 = Translate([link7], 0, 0, 300)
#link7 = Rotate([link7],-90,0,1,0)

link7 = HalRotate([link7],c,"joint6",1,0,0,1)

# link 6
link6 = AsciiOBJ(filename=configpath+"joint6.obj");
#link6 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_joint6.stl")
## rotate and translate it so that the joint 6 is in origin
#link6 = Rotate([link6],-90,0,1,0)
#link6 = Translate([link6],0,0,-1.8) #note: 1.8 + 0.4 = 2.2 - in the drawing distance from join5 to end effector
## mount link7 on it
link6 = Translate([link6],-730,-12,-1165)
link6 = Collection([link7, link6])
link6 = Translate([link6],0,0,0)
##translate it back so joint 5 rotation in origin
#link6 = Translate([link6],0,0,1.8)# stationary base
#echter roboter hat:
link6 = Rotate([link6],-90,0,1,0)
#5. Achse nach unten drehen um mit Tool uebereinzustimmen
#link6 = Rotate([link6],90,0,1,0)

##apply HAL DOF
link6 = HalRotate([link6],c,"joint5",1,0,1,0)

# link 5, wrist
link5 = AsciiOBJ(filename=configpath+"joint5.obj");
#link5 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_joint5.stl")
link5 = Color([0.5,0.5,0.5,1],[link5])
link5 = Translate([link5],-730,-12,-1165)
link5 = Collection([link6, link5])
link5 = Translate([link5],730,0,0)

link5 = HalRotate([link5],c,"joint4",1,1,0,0)

# link4, arm, origin is in the joint3 location
link4 = AsciiOBJ(filename=configpath+"joint4.obj")
#link4 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_joint4.stl")
## need to rotate it, and translate it so that joint 4 is in origin
link4 = Translate([link4],0,-12,-1165)
link4 = Collection([link5, link4])
#link4 = Translate([link4],0,0,0)
link4 = Rotate([link4],0,0,1,0)

link4 = HalRotate([link4],c,"joint3",1,0,1,0)

#--------- link 3 / joint 3
link3 = AsciiOBJ(filename=configpath+"joint3.obj")
#link3 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_joint3.stl")
link3 = Color([0.5,0.5,0.5,1],[link3])
    #Staubli_RX60L_text = AsciiOBJ(filename=configpath+"Staubli_RX60L_text.obj")
    #Staubli_RX60L_text = Rotate([Staubli_RX60L_text],180,0,0,1)
    #Staubli_RX60L_text = Translate([Staubli_RX60L_text],9,1,4)
    #Staubli_RX60L_text = Color([0,0,1,1],[Staubli_RX60L_text])
#link3 = Collection([link3, Staubli_RX60L_text])
link3 = Translate([link3],0,0,-1165)
link3 = Collection([link4, link3])
link3 = Translate([link3],500,0,0)
link3 = Rotate([link3],0,0,1,0)

link3 = HalRotate([link3],c,"joint2",1,0,1,0)

#--------- link 2 / joint 2
link2 = AsciiOBJ(filename=configpath+"joint2.obj")
#link2 = AsciiSTL(filename=configpath+"stl/Staubli_RX60L_joint2.stl")


#compensate for the origin of link2 not being in the rotation center
link2 = Translate([link2],0,0,-665)
#assemble link3 + link2
link2 = Collection([link3, link2])
#move link2 back up to it's original position
link2 = Translate([link2],0,0,665)
#link the hal pin
link2 = HalRotate([link2],c,"joint1",1,0,0,1)

#--------- link 1 / base / (stationary) joint1
# stationary base
#link1 = AsciiSTL(filename=configpath+"3dstostlonline/Staubli_RX60L_joint1.stl")
link1 = AsciiOBJ(filename=configpath+"joint1.obj")
link1 = Color([0.5,0.5,0.5,1],[link1])
#Dark grey [0.18,0.19,0.2,1]
link1 = Rotate([link1],180,0,0,1)


#to start just inserting the first (base) piece:
#Staubli_RX60L = Collection([link1])
Staubli_RX60L = Collection([link2, link1])

#assemble everything in the final Collection
model = Collection([tooltip, Staubli_RX60L, floor, work])


#main(model, tooltip, work,50)

main(model, tooltip, work, 1800, lat=-55, lon=-30)
# model, tooltip, work, distance, lat, lon -> move eyeview
